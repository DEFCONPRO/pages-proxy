worker_processes 1;
daemon off;

events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  include mime.types;
  default_type application/octet-stream;

  sendfile on;

  gzip on;
  gzip_vary on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gunzip on;
  gzip_static always;
  gzip_types text/plain text/css text/js text/xml
    text/javascript application/javascript application/x-javascript
    application/json application/xml application/xml+rss
    font/ttf font/otf font/x-woff image/svg+xml
    application/vnd.ms-fontobject
    application/ttf application/x-ttf application/otf
    application/x-otf application/truetype application/eot
    application/opentype application/x-opentype application/woff
    application/font application/font-woff woff application/font-sfnt;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - {{port}}
  server_tokens off;
  more_clear_headers Server;
  recursive_error_pages on;

  # Cloudfront forwards these but doesn't consider them part of the cache key
  # so drop them before passing to the origin, since responses aren't actually cacheable
  proxy_set_header If-Match "";
  proxy_set_header If-None-Match "";
  proxy_set_header If-Modified-Since "";
  proxy_set_header If-Unmodified-Since "";
  proxy_set_header Range "";
  proxy_set_header If-Range "";

  map_hash_max_size 64;
  map_hash_bucket_size 256;
  map $name $sts {
    default "max-age=31536000; preload";
    ~^({{env "INCLUDE_SUBDOMAINS"}})$ "max-age=31536000; preload; includeSubDomains";
  }

  map $name $bucket_url {
    default {{env "DEDICATED_S3_BUCKET_URL"}};
    ~({{env "FEDERALIST_PROXY_SERVER_NAME"}}) {{env "FEDERALIST_S3_BUCKET_URL"}};
  }

  server {
    listen {{port}};
    server_name  ~^(?<name>.+)\.{{env "DOMAIN"}}$;
    resolver {{env "DNS_RESOLVER"}} valid=60s;
    add_header Strict-Transport-Security $sts always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Server "Federalist" always;

    location =/robots.txt {
      alias {{env "HOME"}}/public/robots.txt;
    }

    location =/health {
      access_log off;
      return 200 "Ok";
    }

    location @notfound {
      # custom 404 pages are *bucket* specific NOT *branch* specific
      proxy_pass $bucket_url/site/$owner/$repo/404.html;
    }

    location @proxy {
      proxy_pass $bucket_url;
      proxy_intercept_errors on;
      error_page 404 403 =404 @notfound;
    }
    
    location / {
      location ~ ^/[^/]+/(?<owner>([^/]+))/(?<repo>([^/]+))/ {

        # Specify the Content-Type header as "text/html" for requests that look
        # like they are for files with specific extensions. This is primarily to
        # allow for HTML "meta redirects" on pages of sites that have been migrated
        # to Federalist. For context, see https://github.com/18F/federalist-proxy/issues/19.
        #
        # More extensions can be added inside the parentheses, separated
        # by | characters, e.g. `\.(cfm|php)$`.
        location ~* \.(cfm)$ {
          add_header Content-Type "text/html";
          add_header Strict-Transport-Security $sts always;
          add_header X-Frame-Options "SAMEORIGIN";
          add_header X-Server "Federalist";

          proxy_pass $bucket_url;
          proxy_hide_header Content-Type;
          proxy_intercept_errors on;
          error_page 404 403 =404 @notfound;
        }

        # Match paths with extensions and possibly query parameters
        location ~ [^?]*\.[^./]+(\?.*)?$ {
          proxy_pass $bucket_url;
          proxy_intercept_errors on;
          error_page 404 403 =404 @notfound;
        }

        # Match paths ending in '/'
        location ~ /$ {
          rewrite ^(.*)$ $1index.html last;
        }

        # What is left are paths without extensions
        proxy_pass $bucket_url$uri/index.html;
        proxy_intercept_errors on;
        error_page 404 403 = @proxy;
      }
    }
  }
}
